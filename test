#!/usr/bin/env bash
set -euo pipefail

test_dir=.build

mkdir -p "$test_dir"

### Helpers #######################

warn_unproved() {
    echo "===== Warning: the following are unproved:"
    for f in $(ls *.mm1); do
        [[ ! "$f" == *theory* ]] || continue
        sed -n \
            -e 's/--.*//' "$f" \
            -e 's/^ *axiom *\([a-zA-Z0-9_]*\).*/\1/p' "$f" \
            | tr '\n' ' '
    done
    echo
}

test_mm() {
    file_name="$1"; shift
    test_name="$(basename $file_name)"
    test_basename="$test_dir/$test_name"
    echo "Checking: $test_name."
    mm0-rs join "$file_name" "$test_basename".combined.mm1
    mm0-rs compile -q --warn-as-error "$test_basename".combined.mm1 "$test_basename".combined.mmb
}

test_regex() {
    test_name="$1"; shift
    regexp="$1"; shift

    test_basename="$test_dir/$test_name"
    echo "Testing: $test_name"
    ./proof-gen.py "$regexp" \
        --mmb "$test_basename.mmb" \
        --mm0 "$test_basename.mm0" \
        --mm1 "$test_basename.mm1" \
        > /dev/null
}

should_fail() {
    ! test_regex "$@" 2>/dev/null
}

green=(00-matching-logic.mm0
       01-propositional.mm1
       02-ml-normalization.mm1
       10-theory-definedness.mm1
       11-definedness-normalization.mm1
       20-theory-words.mm1
      )


### Main #######################

warn_unproved
for f in "${green[@]}"; do
    test_mm $f;
done

should_fail 'fail-a-star'      '(a)*'
test_regex  'a-or-b-star'      '(a + b)*'
test_regex  'kleene-star-star' '(a *) * ->> (a *)'
test_regex  'alternate-top'    '(a * . b) * + ((b * . a) *)'
test_regex  'even-or-odd' \
    '((a . a) + (a . b) + (b . a) + (b . b)) * + ((a + b) . (((a . a) + (a . b) + (b . a) + (b . b)) *))'
test_regex  'no-contains-a-or-no-only-b' \
    '(~ (top . a . top)) + ~ (b *)'

echo Passed.
