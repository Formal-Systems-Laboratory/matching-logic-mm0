#!/usr/bin/env bash
set -euo pipefail
test_dir=.build


### Helpers #######################

function error_handler(){
    local last_status_code=$1;
    local error_line_number=$2;
    echo 1>&2 "====== Error: exited with status $last_status_code at line $error_line_number";
}
trap  'error_handler $? $LINENO' ERR

warn_unproved() {
    echo "===== Warning: the following are unproved:"
    for f in $(ls *.mm1); do
        [[ ! "$f" == *theory* ]] || continue
        sed -n \
            -e 's/--.*//' "$f" \
            -e 's/^ *axiom *\([a-zA-Z0-9_]*\).*/\1/p' "$f" \
            | tr '\n' ' '
    done
    echo
}

test_mm() {
    file_name="$1"; shift
    test_name="$(basename $file_name)"
    test_basename="$test_dir/$test_name"
    echo "Testing: $test_name."
    mm0-rs join "$file_name" "$test_basename".combined.mm1
    mm0-rs compile -q --warn-as-error "$test_basename".combined.mm1 "$test_basename".combined.mmb
}

test_regex() {
    theorem="$1"; shift
    test_name="$1"; shift
    regexp="$1"; shift

    test_basename="$test_dir/$test_name"
    ./proof-gen.py "$theorem" "$regexp" > "$test_basename.mm1"
    test_mm "$test_basename.mm1"
}

### Main #######################

mkdir -p "$test_dir"
warn_unproved
for f in $(ls *.mm0 *.mm1 | sort); do
    test_mm $f;
done
test_regex 'fp-implies-regex' 'a-or-b-star'                '(a + b)*'
test_regex 'fp-implies-regex' 'kleene-star-star'           '(a *) * ->> (a *)'
test_regex 'fp-implies-regex' 'example-in-paper'           '(a . a)* ->> (((a *) . a) + epsilon) '
test_regex 'fp-implies-regex' 'alternate-top'              '((a *) . b) * + (((b *) . a) *)'
test_regex 'fp-implies-regex' 'even-or-odd'                '((((a . a) + (a . b)) + (b . a)) + (b . b)) * + ((a + b) . (((((a . a) + (a . b)) + (b . a)) + (b . b)) *))'
test_regex 'fp-implies-regex' 'no-contains-a-or-no-only-b' '(~ (top . (a . top))) + ~ (b *)'
echo Passed.
