import "00-matching-logic.mm0";
import "01-propositional.mm1";


--- Normalizations over various sugar
-------------------------------------

--- not
theorem norm_not (phi phi2: Pattern)
  (h: $ Norm phi phi2 $):
  $ Norm (~phi) (~phi2) $ =
  '(norm_imp h norm_refl);
theorem norm_imp_l (phi1 phi2 psi: Pattern)
  (h: $ Norm phi1 phi2 $):
  $ Norm (phi1 -> psi) (phi2 -> psi) $ =
  '(norm_imp h norm_refl);
theorem norm_imp_r (phi psi1 psi2: Pattern)
  (h: $ Norm psi1 psi2 $):
  $ Norm (phi -> psi1) (phi -> psi2) $ =
  '(norm_imp norm_refl h);
theorem eFresh_not {x: EVar} (phi: Pattern x)
  (h: $ _eFresh x phi $):
  $ _eFresh x (~ phi) $ =
  '(eFresh_imp h eFresh_triv);
theorem eSubstitution_in_not {x: EVar} (psi phi: Pattern x):
  $ Norm (e[ psi / x ] ~phi) (~e[ psi / x ] phi) $ =
  '(norm_trans eSubstitution_in_imp @ norm_imp norm_refl eSubstitution_triv);
theorem sSubstitution_in_not {X: SVar} (psi phi: Pattern X):
  $ Norm (s[ psi / X ] ~phi) (~(s[ psi / X ] phi)) $ =
  '(norm_trans sSubstitution_in_imp @ norm_imp norm_refl sSubstitution_triv);

--- or
theorem norm_or (phi psi phi2 psi2: Pattern)
  (h1: $ Norm phi phi2 $)
  (h2: $ Norm psi psi2 $):
  $ Norm (phi \/ psi) (phi2 \/ psi2) $ =
  '(norm_imp (norm_not h1) h2);
theorem eFresh_or {x: EVar} (phi1 phi2: Pattern x)
  (h1: $ _eFresh x phi1 $)
  (h2: $ _eFresh x phi2 $):
  $ _eFresh x (phi1 \/ phi2) $ =
  '(eFresh_imp (eFresh_not h1) h2);

--- and
theorem norm_and (phi psi phi2 psi2: Pattern)
  (h1: $ Norm phi phi2 $)
  (h2: $ Norm psi psi2 $):
  $ Norm (phi /\ psi) (phi2 /\ psi2) $ =
  '(norm_not @ norm_imp h1 (norm_not h2));
theorem eFresh_and {x: EVar} (phi1 phi2: Pattern x)
  (h1: $ _eFresh x phi1 $)
  (h2: $ _eFresh x phi2 $):
  $ _eFresh x (phi1 /\ phi2) $ =
  '(eFresh_not @ eFresh_imp h1 @ eFresh_not h2);
theorem eSubstitution_in_and {x: EVar} (psi phi1 phi2: Pattern x):
  $ Norm (e[ psi / x ] (phi1 /\ phi2)) ((e[ psi / x ] phi1) /\ e[ psi / x ] phi2) $ =
  '(norm_trans eSubstitution_in_not @ norm_not @ norm_trans eSubstitution_in_imp @ norm_imp_r eSubstitution_in_not);


--- High level versions of axioms
---------------------------------

theorem exists_generalization_strict {x: EVar} (phi1: Pattern x) (phi2: Pattern)
  (h: $ phi1 -> phi2 $):
  $ (exists x phi1) -> phi2 $ =
  '(exists_generalization eFresh_triv h);
theorem propag_exists_strict {box: SVar} {x: EVar} (ctx: Pattern box) (phi: Pattern x):
  $ app[ exists x phi / box ] ctx -> exists x (app[ phi / box ] ctx) $ =
  '(propag_exists eFresh_triv);

theorem exists_framing {x: EVar} (phi1 phi2: Pattern x)
  (h: $ phi1 -> phi2 $):
  $ (exists x phi1) -> exists x phi2 $ =
  '(exists_generalization eFresh_exists_same_var @ syl exists_intro_same_var h);

theorem or_exists {x: EVar} (phi1: Pattern) (phi2: Pattern x):
  $ (phi1 \/ exists x phi2) <-> exists x (phi1 \/ phi2) $ =
  '(ibii
    (eori
      (syl exists_intro_same_var orl)
      (exists_generalization eFresh_exists_same_var @ syl exists_intro_same_var orr))
    (exists_generalization (eFresh_or eFresh_triv eFresh_exists_same_var) @ eori orl @ orrd exists_intro_same_var));

theorem imp_exists {x: EVar} (phi1: Pattern) (phi2: Pattern x):
  $ (phi1 -> exists x phi2) <-> exists x (phi1 -> phi2) $ =
  '(ibii
    (rsyl (imim1 dne) @ rsyl (anl or_exists) @ exists_framing @ imim1 notnot1)
    (rsyl (exists_framing @ imim1 dne) @ rsyl (anr or_exists) @ imim1 notnot1));

theorem and_exists_forwards {x: EVar} (phi1: Pattern) (phi2: Pattern x):
  $ (exists x (phi1 /\ phi2)) -> (phi1 /\ exists x phi2) $ =
  '(iand
    (rsyl (exists_framing anl) (exists_generalization_strict id))
    (exists_framing anr));
theorem and_exists_reverse {x: EVar} (phi1: Pattern) (phi2: Pattern x):
  $ (phi1 /\ exists x phi2) -> (exists x (phi1 /\ phi2)) $ =
  '(impcom @ imim2 (anr imp_exists) (exists_framing ian2));
theorem and_exists {x: EVar} (phi1: Pattern) (phi2: Pattern x):
  $ (exists x (phi1 /\ phi2)) <-> (phi1 /\ exists x phi2) $ =
  '(ibii and_exists_forwards and_exists_reverse);

theorem framing_norm {box: SVar} (ctx: Pattern box) (phi1 phi2 rho1 rho2: Pattern)
  (h1: $ Norm (app[ phi1 / box ] ctx) rho1 $)
  (h2: $ Norm (app[ phi2 / box ] ctx) rho2 $)
  (h3: $ phi1 -> phi2 $):
  $ rho1 -> rho2 $ = '(norm (norm_imp h1 h2) @ framing h3);
theorem singleton_norm {box1 box2: SVar} {x: EVar}
  (ctx1 rho1: Pattern box1 x) (ctx2 rho2: Pattern box2 x)
  (phi: Pattern x)
  (h1: $ Norm (app[ (eVar x) /\ phi / box1 ] ctx1) rho1 $)
  (h2: $ Norm (app[ (eVar x) /\ ~phi / box2 ] ctx2) rho2 $):
  $ ~(rho1 /\ rho2) $ =
  '(norm (norm_not @ norm_and h1 h2) singleton);
