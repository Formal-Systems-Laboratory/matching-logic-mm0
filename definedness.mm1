import "definedness-core.mm1";
import "propositional.mm1";

theorem exists_generalization_strict {x: EVar} (phi1: Pattern x) (phi2: Pattern)
  (h: $ phi1 -> phi2 $):
  $ (exists x phi1) -> phi2 $ =
  '(exists_generalization eFresh_triv h);
theorem propag_exists_strict {box: SVar} {x: EVar} (ctx: Pattern box) (phi: Pattern x):
  $ app[ exists x phi / box ] ctx -> exists x (app[ phi / box ] ctx) $ =
  '(propag_exists eFresh_triv);

theorem norm_not (phi phi2: Pattern)
  (h: $ Norm phi phi2 $):
  $ Norm (~phi) (~phi2) $ =
  '(norm_imp h norm_refl);
theorem norm_or (phi psi phi2 psi2: Pattern)
  (h1: $ Norm phi phi2 $)
  (h2: $ Norm psi psi2 $):
  $ Norm (phi \/ psi) (phi2 \/ psi2) $ =
  '(norm_imp (norm_not h1) h2);
theorem norm_and (phi psi phi2 psi2: Pattern)
  (h1: $ Norm phi phi2 $)
  (h2: $ Norm psi psi2 $):
  $ Norm (phi /\ psi) (phi2 /\ psi2) $ =
  '(norm_not @ norm_imp h1 (norm_not h2));

theorem eFresh_not {x: EVar} (phi: Pattern x)
  (h: $ _eFresh x phi $):
  $ _eFresh x (~ phi) $ =
  '(eFresh_imp h eFresh_triv);
theorem eFresh_or {x: EVar} (phi1 phi2: Pattern x)
  (h1: $ _eFresh x phi1 $)
  (h2: $ _eFresh x phi2 $):
  $ _eFresh x (phi1 \/ phi2) $ =
  '(eFresh_imp (eFresh_not h1) h2);
theorem eFresh_and {x: EVar} (phi1 phi2: Pattern x)
  (h1: $ _eFresh x phi1 $)
  (h2: $ _eFresh x phi2 $):
  $ _eFresh x (phi1 /\ phi2) $ =
  '(eFresh_not @ eFresh_imp h1 @ eFresh_not h2);

theorem exists_framing {x: EVar} (phi1 phi2: Pattern x)
  (h: $ phi1 -> phi2 $):
  $ (exists x phi1) -> exists x phi2 $ =
  '(exists_generalization eFresh_exists_same_var @ syl exists_intro_same_var h);

theorem or_exists {x: EVar} (phi1: Pattern) (phi2: Pattern x):
  $ (phi1 \/ exists x phi2) <-> exists x (phi1 \/ phi2) $ =
  '(ibii
    (eori
      (syl exists_intro_same_var orl)
      (exists_generalization eFresh_exists_same_var @ syl exists_intro_same_var orr))
    (exists_generalization (eFresh_or eFresh_triv eFresh_exists_same_var) @ eori orl @ orrd exists_intro_same_var));


theorem framing_norm {box: SVar} (ctx: Pattern box) (phi1 phi2 rho1 rho2: Pattern)
  (h1: $ Norm (app[ phi1 / box ] ctx) rho1 $)
  (h2: $ Norm (app[ phi2 / box ] ctx) rho2 $)
  (h3: $ phi1 -> phi2 $):
  $ rho1 -> rho2 $ = '(norm (norm_imp h1 h2) @ framing h3);
theorem singleton_norm {box1 box2: SVar} {x: EVar}
  (ctx1 rho1: Pattern box1 x) (ctx2 rho2: Pattern box2 x)
  (phi: Pattern x)
  (h1: $ Norm (app[ (eVar x) /\ phi / box1 ] ctx1) rho1 $)
  (h2: $ Norm (app[ (eVar x) /\ ~phi / box2 ] ctx2) rho2 $):
  $ ~(rho1 /\ rho2) $ =
  '(norm (norm_not @ norm_and h1 h2) singleton);

theorem eSubstitution_in_not {x: EVar} (psi phi: Pattern x):
  $ Norm (e[ psi / x ] ~phi) (~e[ psi / x ] phi) $ =
  '(norm_trans eSubstitution_in_imp @ norm_imp norm_refl eSubstitution_in_bot);
theorem sSubstitution_in_not {X: SVar} (psi phi: Pattern X):
  $ Norm (s[ psi / X ] ~phi) (~(s[ psi / X ] phi)) $ =
  '(norm_trans sSubstitution_in_imp @ norm_imp norm_refl sSubstitution_in_bot);

theorem eSubstitution_in_and {x: EVar} (psi phi1 phi2: Pattern x):
  $ Norm (e[ psi / x ] (phi1 /\ phi2)) ((e[ psi / x ] phi1) /\ e[ psi / x ] phi2) $;

def defCtx {box: SVar}: Pattern box = $ (|^ sVar box ^|) $;
theorem defNorm {box: SVar} (phi: Pattern):
  $ Norm (app[ phi / box ] (defCtx box)) (|^ phi ^|) $ =
  '(norm_trans appCtxR @ norm_app norm_refl appCtxVar);
theorem singletonDef {x: EVar} (phi: Pattern x):
  $ ~(|^ eVar x /\ phi ^| /\ |^ eVar x /\ ~phi ^|) $ =
  '(singleton_norm (! defNorm box1) (! defNorm box2));
theorem framingDef (h: $ phi1 -> phi2 $):
  $ |^ phi1 ^| -> |^ phi2 ^| $ =
  '(framing_norm (! defNorm box) defNorm h);
theorem propag_or_def (phi1 phi2: Pattern)
  (h: $ |^ phi1 \/ phi2 ^| $):
  $ |^ phi1 ^| \/ |^ phi2 ^| $ =
  '(norm (norm_or defNorm defNorm) @ propag_or @ norm (norm_sym (! defNorm box)) h);

theorem prop_43_bot (rho: Pattern): $ bot -> rho $ = 'absurdum;
theorem prop_43_or {box: SVar} (ctx: Pattern box) (phi1 phi2: Pattern):
  $ (app[ phi1 / box ] ctx \/ app[ phi2 / box ] ctx) -> app[ phi1 \/ phi2 / box ] ctx $ =
  '(eori (framing orl) (framing orr));
theorem prop_43_exists {box: SVar} {x: EVar} (ctx: Pattern box) (phi: Pattern x):
  $ (exists x (app[ phi / box ] ctx)) -> app[ exists x phi / box ] ctx $ =
  '(exists_generalization (eFresh_appCtx eFresh_triv eFresh_exists_same_var) (framing exists_intro_same_var));

--- prop_44
theorem cong_of_equiv_not (h: $phi1 <-> phi2$): $~phi1 <-> ~phi2$ = '(noteqi h);
theorem cong_of_equiv_imp_l (h: $phi1 <-> phi2$): $(phi1 -> psi) <-> (phi2 -> psi)$ = '();
theorem cong_of_equiv_imp_r (h: $phi1 <-> phi2$): $(psi -> phi1) <-> (psi -> phi2)$ = '();
theorem cong_of_equiv_and_l (h: $phi1 <-> phi2$): $(phi1 /\ psi) <-> (phi2 /\ psi)$ = '();
theorem cong_of_equiv_and_r (h: $phi1 <-> phi2$): $(psi /\ phi1) <-> (psi /\ phi2)$ = '();
theorem cong_of_equiv_exists (phi1 phi2: Pattern x)  (h: $phi1 <-> phi2$): $(exists x phi1) <-> (exists x phi2)$ = '();

theorem univ_gene {x: EVar} (phi: Pattern x)
  (p: $ phi $):
  $ forall x phi $ = '(exists_generalization_strict @ notnot1 p);
theorem var_subst {x y: EVar} (phi: Pattern x y):
  $ (forall x phi) -> e[ eVar y / x ] phi $ =
  '(con1 @ norm (norm_imp eSubstitution_in_not norm_refl) exists_intro);
theorem var_subst_same_var {x: EVar} (phi: Pattern x):
  $ (forall x phi) -> phi $ = '(con1 exists_intro_same_var);

theorem lemma_46 (phi: Pattern) {box: SVar} (ctx: Pattern box)
  (p : $ phi $):
  $ ~ (app[ (~ phi) / box ] ctx) $ = '(syl propag_bot @ framing @ notnot1 p);

theorem eqiv_to_eq (h: $ phi <-> psi $):
  $ phi == psi $ = '(norm (norm_not @ ! defNorm box) @ lemma_46 h);

theorem eq_intro: $ phi == phi $ = '(eqiv_to_eq biid);

theorem membership_intro {x: EVar} (phi: Pattern x)
  (h: $ phi $):
  $ forall x (x in phi) $ =
  '(univ_gene @ framingDef (iand id (a1i h)) definedness);

theorem membership_elim {x: EVar} (phi: Pattern)
  (h: $ forall x (x in phi) $):
  $ phi $ =
  '(dne @ exists_generalization_strict (dne @ dne (norm (norm_not @ norm_and (! defNorm box1) (! appCtxVar box2)) singleton) @ var_subst_same_var h) existence);

theorem membership_var_forward {x y: EVar}: $ (x in (eVar y)) -> (eVar x == eVar y) $
 = '( rsyl (iand (dne singletonDef) (imim1i (framingDef ancom) @ dne @ norm (norm_not @ norm_and defNorm defNorm) (! singleton box1 box2)))
    @ rsyl (anri not_distr_or)
    @ rsyl (con3 @ norm (norm_imp norm_refl @ norm_or defNorm defNorm) propag_or)
    @ con3
    @ norm (norm_imp defNorm norm_refl)
      (! framing box _ _ _ @ anr lemma_51));
theorem membership_var_reverse {x y: EVar}: $ (eVar x == eVar y) -> (x in (eVar y)) $
 = '(propag_or_def @ framingDef or_imp_xor_and @ norm defNorm @ prop_43_or @ norm (norm_sym @ norm_or defNorm (! defNorm box)) @ orl definedness);
theorem membership_var_bi {x y: EVar}:
  $ (x in (eVar y)) <-> (eVar x == eVar y) $
 = '(iani membership_var_forward  membership_var_reverse);
theorem membership_var {x y: EVar}:
  $ (x in (eVar y)) == (eVar x == eVar y) $
 = '(eqiv_to_eq membership_var_bi);

theorem membership_not_forward {x: EVar} (phi: Pattern x):
  $(x in ~phi) -> ~(x in phi) $ = '(con2 @ dne singletonDef);
theorem membership_not_reverse {x: EVar} (phi: Pattern x):
  $~(x in phi) -> (x in ~phi) $ =
  '(propag_or_def @ framingDef (exp @ iand anl @ curry @ com12 dne) definedness);
theorem membership_not {x: EVar} (phi: Pattern x):
  $ (x in ~phi) == ~(x in phi) $ =
  '(eqiv_to_eq @ iani membership_not_forward membership_not_reverse);

theorem framing_in {x: EVar} (phi1 phi2: Pattern x)
  (h: $ phi1 -> phi2 $):
  $ (x in phi1) -> (x in phi2)$ =
  '(framingDef @ anim2 h);


--- (membership and)
theorem membership_and_forward {x: EVar} (phi1 phi2: Pattern x):
  $ x in (phi1 /\ phi2) -> (x in phi1) /\ (x in phi2) $
  = '(iand (framingDef @ iand anl anrl) (framingDef @ iand anl anrr));
theorem membership_and_reverse {x: EVar} (phi1 phi2: Pattern x):
  $  (x in phi1) /\ (x in phi2) -> x in (phi1 /\ phi2) $
  ='(syl dne @ con2 @ rsyl membership_not_reverse @ rsyl (framing_in @ anl notan) @ rsyl
      (framingDef @ anl andi)
      (rsyl (norm (norm_imp defNorm @ norm_or defNorm defNorm) (! propag_or box)) @ rsyl (orim (con2 @ dne singletonDef) (con2 @ dne singletonDef)) (anr notan)));
theorem membership_and_bi {x: EVar} (phi1 phi2: Pattern x):
  $ x in (phi1 /\ phi2) <-> (x in phi1) /\ (x in phi2) $
  = '(iani membership_and_forward membership_and_reverse);
theorem membership_and {x: EVar} (phi1 phi2: Pattern x):
  $ x in (phi1 /\ phi2) == (x in phi1) /\ (x in phi2) $ =
  '(eqiv_to_eq membership_and_bi);

theorem membership_imp_forward {x: EVar}  (phi1 phi2: Pattern):
  $ x in (phi1 -> phi2) -> (x in phi1) -> (x in phi2) $ =
  '(exp @ rsyl membership_and_reverse @ framing_in @ impcom @ syl mpcom id );
theorem membership_imp_reverse {x: EVar}  (phi1 phi2: Pattern):
  $((x in phi1) -> (x in phi2))  -> x in (phi1 -> phi2)$ =
  '(imp_to_or @ eori (rsyl membership_not_reverse @ framing_in absurd)
                     (framing_in @ com12 idd ) );
theorem membership_imp {x: EVar}  (phi1 phi2: Pattern):
  $ x in (phi1 -> phi2) == (x in phi1) -> (x in phi2) $ =
  '(eqiv_to_eq @ iani membership_imp_forward membership_imp_reverse);

theorem membership_exists_reverse {x y: EVar} (phi: Pattern x y):
  $ ((exists y (x in phi) -> x in (exists y phi))) $
 = '_;
-- theorem membership_exists {x y: EVar} (phi: Pattern x y):
--   $ (x in (exists y phi)) == (exists y (x in phi)) $
--  = '(eqiv_to_eq @ iani  _ membership_exists_reverse);

theorem lemma_exists_and {x: EVar} (phi: Pattern):
  $ phi <-> exists x (eVar x /\ phi) $ =
  '(ibii
    (rsyl notnot1 @ anr or_exists @ exists_framing
      (expcom @ iand appl @ rsyl anl dne)
      @ anl or_exists @ orr existence)
    (exists_generalization_strict anr));

theorem lemma_56 {box: SVar} (ctx: Pattern box) (phi: Pattern):
  $ (app[ phi / box ] ctx) -> |^ phi ^| $ =
  '(rsyl (rsyl
    (framing @ anl lemma_exists_and)
    propag_exists_strict)
    (exists_generalization_strict @ rsyl
      (dne @ singleton_norm norm_refl (! defNorm box2))
      (propag_or_def @ framingDef (anl com12b @ rsyl dne @ imim2i dne) (! definedness x))
    ));

--- lemma 59
theorem functional_subst {x: EVar} {y: EVar} (phi1: Pattern x y) (phi2: Pattern x):
  $(forall x phi1) /\ (exists y phi2 == y) -> e[ phi2 / x ] phi1$
  ;

--- lemma 60
-- theorem lemma_60_forward {x: EVar}  {box: SVar} (phi1 ctx: Pattern box x):
--   $app[ phi1 /\ (x in phi2) / box ] ctx -> (app[ phi1 / box ] ctx) /\ (x in phi2)$;
theorem lemma_60_reverse {x: EVar} {box: SVar} (phi1 ctx: Pattern box x):
  $(app[ phi1 / box ] ctx) /\ (x in phi2) -> app[ phi1 /\ (x in phi2) / box ] ctx$
  ;
-- theorem lemma_60 {x: EVar} {box: SVar} (phi1 ctx: Pattern box x):
--   $(app[ phi1 /\ (x in phi2) / box ] ctx) == app[ phi1 / box ] ctx /\ (x in phi2)$
--   = '(eqiv_to_eq @ iani lemma_60_forward lemma_60_reverse );


--- Lemma 62
theorem lemma_62_forward {x: EVar} (phi: Pattern):
  $ (exists x ((x in phi) /\ eVar x)) -> phi $ =
  '(exists_generalization_strict @ syl dne @ dne @ con3 (bi1i anass) (singleton_norm (! defNorm box1) (! appCtxVar box2)));
theorem lemma_62_reverse {y: EVar} (phi: Pattern) {.box: SVar} :
  $ phi -> (exists y ((y in phi) /\ eVar y))$
  = '( ! membership_elim x _
     @ exists_generalization eFresh_triv
     @ notnot1
     @ membership_imp_reverse
     @ syl membership_exists_reverse
     @ syl (bi2i @ cong_of_equiv_exists membership_and_bi)
     @ syl (bi2i @ cong_of_equiv_exists @ cong_of_equiv_and_r membership_var_bi)
     @ syl (! exists_intro y x)
     @ norm (norm_imp norm_refl @ norm_sym @ norm_trans eSubstitution_in_and
                @ norm_and (norm_trans eSubstitution_in_app @ norm_app
                              eSubstitution_in_sym
                            @ norm_trans eSubstitution_in_and @ norm_and eSubstitution_triv
                            @ norm_trans eSubstitution_in_app @ norm_app eSubstitution_in_sym
                            @ norm_trans eSubstitution_in_and @ norm_and
                              eSubstitution_in_same_eVar
                              eSubstitution_triv)
                           ( norm_trans eSubstitution_in_not @ norm_not
                            @ norm_trans eSubstitution_in_app @ norm_app eSubstitution_triv
                            @ norm_trans eSubstitution_in_not @ norm_not
                            @ norm_trans eSubstitution_in_and @ norm_and
                              (norm_trans eSubstitution_in_imp @ norm_imp
                                 eSubstitution_in_eVar eSubstitution_in_same_eVar )
                              (norm_trans eSubstitution_in_imp @ norm_imp
                                 eSubstitution_in_same_eVar eSubstitution_in_eVar )   )
            )
     @ iand ( syl (norm (norm_imp (norm_and defNorm norm_refl) @ defNorm) (! lemma_60_reverse _ _ box) )
            @ iand (a1i definedness)
                   id
            )
            (a1i eq_intro)
     );


--- contextual implications
def ctximp_app {box: SVar} (ctx: Pattern box) (phi: Pattern) {dummy: EVar}: Pattern =
    $ exists dummy (eVar dummy /\ ((app[ eVar dummy / box ] ctx) C_ phi)) $;

theorem wrap_lemma_1 {x: EVar} (phi psi: Pattern x)
  (h: $ (x in phi) -> psi $):
  $ (x in phi) -> |_ psi _| $ =
  '(syl (con3 @ framingDef @ con3 h) @ con2 @ rsyl (framingDef membership_not_reverse)
  (rsyl (norm (norm_imp
    (norm_trans appCtxR @ norm_app norm_refl @ norm_trans appCtxR @ norm_app norm_refl appCtxVar)
    norm_refl) (! lemma_56 box)) (con2 @ dne singletonDef)));


-- theorem appCtx_ceil_1:
--   $ app[ phi /\ |^ psi ^| / box ] ctx -> app[ phi / box ] ctx /\ |^ psi ^| $ =
--   '(iand (framing anl) (rsyl _ (norm (norm_imp _ norm_refl) lemma_56)));
theorem appCtx_ceil_2 {box: SVar} (ctx: Pattern box) (phi psi: Pattern):
  $ app[ phi / box ] ctx /\ |^ psi ^| -> app[ phi /\ |^ psi ^| / box ] ctx $ =
  '();

--- TODO: review variable binding
--- TODO: Introduce notation
--- lemma 91 (Specialized to Application contexts)
theorem unwrap {box: SVar} (ctx: Pattern box) (phi psi: Pattern) {dummy: EVar}
  (h: $ phi -> (ctximp_app box ctx psi dummy) $):
  $ (app[ phi / box ] ctx) -> psi $ =
  '(_);
theorem wrap {box: SVar} (ctx: Pattern box) (phi psi: Pattern) {dummy: EVar}
  (h: $ (app[ phi / box ] ctx) -> psi $):
  $ phi -> (ctximp_app box ctx psi dummy) $ =
  '(rsyl _ @ exists_framing @ anim id
    (wrap_lemma_1 @ expcom @ rsyl exists_intro_same_var (imim1i (rsyl (exists_framing appCtx_ceil_2) prop_43_exists) (rsyl (framing (rsyl (exists_framing ancom) lemma_62_forward)) h)))
  );


