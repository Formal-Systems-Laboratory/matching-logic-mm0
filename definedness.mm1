import "definedness-core.mm1";
import "propositional.mm1";

-- do (def (deduction-thm-lemma phi ppsi) (
--  ));

theorem prop_43_bot (rho: Pattern): $ bot -> rho $ = 'absurdum;
theorem prop_43_or (ctx phi1 phi2 rho12 rho1 rho2: Pattern)
  (h1: $ _AppCtx ctx (phi1 \/ phi2) rho12 $)
  (h2: $ _AppCtx ctx phi1 rho1 $)
  (h3: $ _AppCtx ctx phi2 rho2 $):
  $ (rho1 \/ rho2) -> rho12 $ = '(eori (framing h2 h1 orl) (framing h3 h1 orr));
theorem prop_43_exists (ctx rho2: Pattern) {x: EVar} (phi rho1: Pattern x)
  (h1: $ _AppCtx ctx phi rho1 $)
  (h2: $ _AppCtx ctx (exists x phi) rho2 $):
  $ (exists x rho1) -> rho2 $ =
    '(exists_generalization @ framing h1 h2 exists_intro_same_var);

theorem univ_gene {x: EVar} (phi: Pattern x)
  (p: $ phi $):
  $ forall x phi $ = '(exists_generalization @ notnot1 p);
theorem var_subst {x y: EVar} (phi: Pattern x y) (rho: Pattern y)
  (subst: $ e[ eVar y / x ] phi ==> rho $):
  $ (forall x phi) -> rho $ =
    '(con1 @ exists_intro @ eSubstitution_in_not subst);
theorem var_subst_same_var {x: EVar} (phi: Pattern x):
  $ (forall x phi) -> phi $ = '(con1 exists_intro_same_var);

theorem lemma_46
  (ctxp: $ _AppCtx ctx (~ phi) rhop $)
  (ctxb: $ _AppCtx ctx bot rhob $)
  (p : $ phi $):
  $ ~rhop $ = '(syl (propag_bot ctxb) (framing ctxp ctxb (notnot1 p)));

theorem lemma_47
  (h: $ phi <-> psi $):
  $ phi == psi $ = '(lemma_46 defAppCtx defAppCtx h);

theorem eq_intro: $ phi == phi $ = '(lemma_47 biid);

theorem membership_intro {x: EVar} (phi: Pattern x)
  (h: $ phi $):
  $ forall x (x in phi) $ =
  '(univ_gene @ framing defAppCtx defAppCtx (iand id (a1i h)) definedness);

theorem membership_elim {x: EVar} (phi: Pattern)
  (h: $ forall x (x in phi) $):
  $ phi $ =
  '(dne @ exists_generalization (dne (dne (singleton defNestedAppCtx (! nestedAppCtxVar box)) (var_subst_same_var h))) existence);


-- theorem membership_var {x y: EVar}:
--    $ (x in (eVar y)) == (eVar x == eVar y) $ = '(lemma_47 @ iani
--    (_)
--    (mp (propag_or defAppCtx defAppCtx defAppCtx) (mp (framing defAppCtx defAppCtx or_imp_xor_and) (mp (prop_43_or defAppCtx defAppCtx defAppCtx) (orl definedness))))
--    );
