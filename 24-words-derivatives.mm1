import "22-words-salomaa.mm1";
import "23-words-fixedpoints.mm1";

--- Derivatives
---------------

def derivative (l : Pattern) (phi : Pattern) : Pattern
    = $ctximp_app box (l . sVar box) phi dummy $;
--- = $exists w (eVar w)  /\ (l . eVar w C_ phi)$;

theorem der_equality:
    $phi == (epsilon /\ phi) \/ (a . (derivative a phi)) \/ (b . (derivative b phi))$;

theorem eq_der_a_emptyset: $(derivative a bot)         <-> bot$;
theorem eq_der_a_epsilon:  $(derivative a epsilon)     <-> bot$;
theorem eq_der_a_a:        $(derivative a a)           <-> epsilon$;
theorem eq_der_a_b:        $(derivative a b)           <-> bot$;
theorem eq_der_a_concat:
    $(derivative a (phi . psi)) <->    (derivative a phi) . psi
                                   \/ ((epsilon /\ phi) . (derivative a psi))$;
theorem eq_der_a_or:
    $(derivative a (phi \/ psi)) <-> (derivative a phi) \/ (derivative a psi)$;
theorem eq_der_a_kleene:
    $(derivative a (kleene X phi)) <-> (derivative a phi) . (kleene X phi)$;
theorem eq_der_a_not:
    $(derivative a (~ phi)) <-> ~ (derivative a phi)$;
theorem eq_der_a_imp:
    $(derivative a (phi -> psi)) <-> ((derivative a phi) -> (derivative a psi))$;

--- Contextual reasoning
------------------------

theorem cong_of_equiv_concat_l (h: $phi1 <-> phi2$): $(phi1 . psi) <-> (phi2 . psi)$;
theorem cong_of_equiv_concat_r (h: $phi1 <-> phi2$): $(psi . phi1) <-> (psi . phi2)$;

--- Reasoning about regular expressions
---------------------------------------

theorem main_goal_interior {X: SVar}
    (he: $epsilon -> rho$)
    (ha: $s[ rho / X ] phi_a -> (derivative a rho)$)
    (hb: $s[ rho / X ] phi_b -> (derivative b rho)$):
    ----------------------------------------------
    $(mu X (epsilon \/ ((a . phi_a) \/ (b . phi_b)))) -> rho$;

--| Apply equivalence left to right
theorem apply_equiv (eq: $phi <-> psi$) (cont: $rho -> psi$): $rho -> phi$
  = '(syl (bi2i eq) cont);

theorem _sSubst_concat {X: SVar} (phi psi1 psi2 rho1 rho2: Pattern X)
  (h1: $ Norm (s[ phi / X ] psi1) rho1 $)
  (h2: $ Norm (s[ phi / X ] psi2) rho2 $):
  $ Norm (s[ phi / X ] (psi1 . psi2)) (rho1 . rho2) $ =
  '(_sSubst_app (_sSubst_app sSubstitution_triv h1) h2);



theorem example_10_concat {X: SVar} (phi: Pattern):
  $ Norm (s[ phi / X ] (concat bot (sVar X))) (concat bot phi) $ =
  (propag_s_subst 'phi 'X $ (concat bot (sVar X)) $);