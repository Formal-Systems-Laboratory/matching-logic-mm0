import "00-matching-logic.mm0";
import "01-propositional.mm1";
import "02-ml-normalization.mm1";
import "12-proof-system-p.mm1";
import "13-fixedpoints.mm1";
import "20-theory-words.mm1";
import "22-words-salomaa.mm1";
import "23-words-fixedpoints.mm1";

--- Derivatives
---------------

local def derivative (l: Pattern) (phi: Pattern) : Pattern
    = $ctximp_app box (l . sVar box) phi dummy $;
--- = $exists w (eVar w)  /\ (l . eVar w C_ phi)$;

theorem der_equality:
    $phi == (epsilon /\ phi) \/ (a . (derivative a phi)) \/ (b . (derivative b phi))$;

theorem eq_der_a_emptyset: $(derivative a bot)         <-> bot$;
theorem eq_der_a_epsilon:  $(derivative a epsilon)     <-> bot$;
theorem eq_der_a_a:        $(derivative a a)           <-> epsilon$;
theorem eq_der_a_b:        $(derivative a b)           <-> bot$;
theorem eq_der_a_concat:
    $(derivative a (phi . psi)) <->    (derivative a phi) . psi
                                   \/ ((epsilon /\ phi) . (derivative a psi))$;
theorem eq_der_a_or:
    $(derivative a (phi \/ psi)) <-> (derivative a phi) \/ (derivative a psi)$;
theorem eq_der_a_kleene:
    $(derivative a (kleene X phi)) <-> (derivative a phi) . (kleene X phi)$;
theorem eq_der_a_not:
    $(derivative a (~ phi)) <-> ~ (derivative a phi)$;
theorem eq_der_a_imp:
    $(derivative a (phi -> psi)) <-> ((derivative a phi) -> (derivative a psi))$;

--- Contextual reasoning
------------------------

theorem cong_of_equiv_concat_l (h: $phi1 <-> phi2$): $(phi1 . psi) <-> (phi2 . psi)$;
theorem cong_of_equiv_concat_r (h: $phi1 <-> phi2$): $(psi . phi1) <-> (psi . phi2)$;
theorem cong_of_equiv_kleene (h: $phi1 <-> phi2$): $(kleene X phi1) <-> (kleene X phi2)$;

--- Reasoning about regular expressions
---------------------------------------

theorem main_goal_leaf :
    $rho -> rho$ = 'id;

theorem main_goal_interior {X: SVar} (phi_a phi_b: Pattern X)
    (he: $epsilon -> epsilon /\ rho$)
    (ha: $s[ rho / X ] phi_a -> (derivative a rho)$)
    (hb: $s[ rho / X ] phi_b -> (derivative b rho)$):
    ----------------------------------------------
    $(mu X (epsilon \/ ((a . phi_a) \/ (b . phi_b)))) -> rho$;

--| Apply equivalence left to right
theorem apply_equiv (eq: $phi <-> psi$) (cont: $rho -> psi$): $rho -> phi$
  = '(syl (bi2i eq) cont);



theorem _sSubst_concat {X: SVar} (phi psi1 psi2 rho1 rho2: Pattern X)
  (h1: $ Norm (s[ phi / X ] psi1) rho1 $)
  (h2: $ Norm (s[ phi / X ] psi2) rho2 $):
  $ Norm (s[ phi / X ] (psi1 . psi2)) (rho1 . rho2) $ =
  '(_sSubst_app (_sSubst_app sSubstitution_triv h1) h2);

theorem _sSubst_nnimp {X: SVar} (phi phi1 phi2 psi1 psi2: Pattern X)
  (h1: $ Norm (s[ phi / X ] phi1) psi1 $)
  (h2: $ Norm (s[ phi / X ] phi2) psi2 $):
  $ Norm (s[ phi / X ] (phi1 ->> phi2)) (psi1 ->> psi2) $ =
  '(_sSubst_imp (_sSubst_not @ _sSubst_not h1) h2);

theorem _eSubst_concat {x: EVar} (phi psi1 psi2 rho1 rho2: Pattern x)
  (h1: $ Norm (e[ phi / x ] psi1) rho1 $)
  (h2: $ Norm (e[ phi / x ] psi2) rho2 $):
  $ Norm (e[ phi / x ] (psi1 . psi2)) (rho1 . rho2) $ =
  '(_eSubst_app (_eSubst_app eSubstitution_triv h1) h2);


theorem example_10_concat {X: SVar} (phi: Pattern):
  $ Norm (s[ phi / X ] (concat bot (sVar X))) (concat bot phi) $ =
  propag_s_subst_auto;


-- theorem regex_eq_der_bot_lemma_1 {x y v w: EVar}:
--   $ Norm (e[ eVar y / v ] exists x (eVar x == eVar w . eVar v )) (exists x (eVar x == eVar w . eVar y )) $ =
--   propag_e_subst_auto;
-- 
-- 
-- theorem regex_eq_der_bot_lemma_2 {x y v w: EVar}:
--   $ (forall v (exists x (eVar x == eVar w . eVar v ))) -> exists x (eVar x == eVar w . eVar y ) $ =
--   '(norm (norm_imp_r regex_eq_der_bot_lemma_1) var_subst);
-- 
-- (norm (,propag_e_subst_auto) @ var_subst @ norm (,propag_e_subst_auto) @ var_subst functional_concat)
-- norm (norm_def appCtxVar) @
-- theorem regex_eq_der_bot
--   (h: $ exists x (eVar x == A) $):
--   $ (derivative A bot) -> bot $
--   = '(exists_generalization_strict @ con3 anr @ notnot1 @ framingDef notnot1 @
--     exists_generalization_strict (com12
--       (eq_to_def @ norm (norm_imp_r @ norm_imp_r @ norm_sym @ norm_trans appCtxR @ norm_app norm_refl appCtxVar) @ eq_to_app_l @ eq_to_app_r eq_to_intro)
--       (exists_generalization_strict (com12 (eq_to_def eq_to_intro) definedness) @
--          norm _ @ var_subst @ norm _ @ var_subst functional_concat)
--         ) h
--   );

theorem regex_eq_der_bot_wrt_a:
  $ (derivative a bot) <-> bot $;
theorem regex_eq_der_bot_wrt_b:
  $ (derivative b bot) <-> bot $;

theorem regex_eq_der_epsilon_wrt_a:
  $ (derivative a epsilon) <-> bot $;
theorem regex_eq_der_epsilon_wrt_b:
  $ (derivative b epsilon) <-> bot $;

theorem regex_eq_der_same_a_wrt_a:
  $ (derivative a a) <-> epsilon $;
theorem regex_eq_der_same_a_wrt_b:
  $ (derivative b b) <-> epsilon $;

theorem regex_eq_der_diff_a_wrt_a:
  $ (derivative a b) <-> bot $;
theorem regex_eq_der_diff_a_wrt_b:
  $ (derivative b a) <-> bot $;

theorem regex_eq_der_kleene_wrt_a: $ (derivative a (kleene X Alpha)) <-> ((derivative a Alpha) . (kleene X Alpha)) $;
theorem regex_eq_der_kleene_wrt_b: $ (derivative b (kleene X Alpha)) <-> ((derivative b Alpha) . (kleene X Alpha)) $;
theorem regex_eq_der_concat_wrt_a: $ (derivative a (Alpha . Beta)) <-> ((derivative a Alpha) . Beta) \/  ((epsilon /\ Alpha) . (derivative a Beta)) $;
theorem regex_eq_der_concat_wrt_b: $ (derivative b (Alpha . Beta)) <-> ((derivative b Alpha) . Beta) \/  ((epsilon /\ Alpha) . (derivative b Beta)) $;
theorem regex_eq_der_choice_wrt_a: $ (derivative a (Alpha \/ Beta)) <-> (derivative a Alpha) \/ (derivative a Beta) $;
theorem regex_eq_der_choice_wrt_b: $ (derivative b (Alpha \/ Beta)) <-> (derivative b Alpha) \/ (derivative b Beta) $;
theorem regex_eq_der_neg_wrt_a: $ (derivative a (~ Alpha)) <-> ~ (derivative a Alpha) $;
theorem regex_eq_der_neg_wrt_b: $ (derivative b (~ Alpha)) <-> ~ (derivative b Alpha) $;

theorem regex_eq_ewp_bot:
  $ (epsilon /\ bot) <-> bot $ ; --- = '(notnot1 idd);

theorem regex_eq_ewp_epsilon:
  $ epsilon /\ epsilon <-> epsilon $ ; --- = '(anl);


theorem regex_eq_ewp_ab
  (h: $ letter -> top_letter $):
  $ epsilon /\ letter <-> bot $
  = '(ibii
    (exists_generalization_strict
      (com12
        (eq_to_imp (eq_to_def @ eq_to_and_l eq_to_intro) (eq_to_not @ eq_to_and_l eq_to_intro))
        (con2 (dne @ singleton_norm (! appCtxVar box1) (! defNorm box2))) -- |^ x /\ ~a ^| <-> ~(x /\ a)
      ) (exists_framing eq_sym (! functional_epsilon x))
      (framingDef (con3 @ imim2i @ syl h dne) @ dne no_confusion_ae_e))
    absurdum);

theorem regex_eq_ewp_a:
  $ epsilon /\ a <-> bot $ = '(regex_eq_ewp_ab orl);

theorem regex_eq_ewp_b:
  $ epsilon /\ b <-> bot $ = '(regex_eq_ewp_ab orr);

theorem regex_eq_ewp_concat:
  $ epsilon /\ (Alpha . Beta) <-> (epsilon /\ Alpha) /\ (epsilon /\ Beta) $;

theorem regex_eq_ewp_and:
  $ epsilon /\ (Alpha /\ Beta) <-> (epsilon /\ Alpha) /\ (epsilon /\ Beta) $
  = 'anandi;

theorem regex_eq_ewp_choice:
  $ epsilon /\ (Alpha \/ Beta) <-> (epsilon /\ Alpha) \/ (epsilon /\ Beta) $
  = 'andi;

theorem regex_eq_ewp_kleene:
  $ epsilon /\ (kleene X Alpha) <-> epsilon $;
---  = '(anl);

theorem regex_eq_ewp_not_bot: $ (epsilon /\ ~bot) <-> epsilon $;
theorem regex_eq_ewp_not_eps: $ (epsilon /\ ~epsilon) <-> bot $;
theorem regex_eq_ewp_not_a: $ (epsilon /\ ~a) <-> epsilon $;
theorem regex_eq_ewp_not_b: $ (epsilon /\ ~b) <-> epsilon $;
theorem regex_eq_ewp_not_concat: $ (epsilon /\ ~(Alpha . Beta)) <-> ((epsilon /\ ~ Alpha) \/ (epsilon /\ ~ Beta)) $;
theorem regex_eq_ewp_not_and: $ (epsilon /\ ~(Alpha /\ Beta)) <-> ((epsilon /\ ~ Alpha) \/ (epsilon /\ ~ Beta)) $;
theorem regex_eq_ewp_not_choice: $ (epsilon /\ ~(Alpha \/ Beta)) <-> ((epsilon /\ ~ Alpha) /\ (epsilon /\ ~ Beta)) $;
theorem regex_eq_ewp_not_kleene: $ (epsilon /\ ~(kleene X Alpha)) <-> bot $;
theorem regex_eq_ewp_not_not: $ (epsilon /\ ~(~ Alpha)) <-> (epsilon /\ Alpha) $;

--- Identity and idemoptency of \/
theorem regex_eq_or_choice_abs: $ top \/ Alpha <-> top $;
theorem regex_eq_or_choice_unit: $ bot \/ Alpha <-> Alpha $;
theorem regex_eq_or_choice_idem: $ Alpha \/ Alpha <-> Alpha $;
theorem regex_eq_or_choice_assoc: $ (Alpha \/ Beta) \/ Gamma <-> Alpha \/ (Beta \/ Gamma) $;
theorem regex_eq_or_choice_comm_node: $ Alpha \/ (Beta \/ Gamma) <-> Beta \/ (Alpha \/ Gamma) $;
theorem regex_eq_or_choice_comm_leaf: $ Alpha \/ Beta <-> Beta \/ Alpha $;

--- Identity and idemoptency of /\
theorem regex_eq_and_choice_abs: $ bot /\ Alpha <-> bot $;
theorem regex_eq_and_choice_unit: $ top /\ Alpha <-> Alpha $;
theorem regex_eq_and_choice_idem: $ Alpha /\ Alpha <-> Alpha $;
theorem regex_eq_and_choice_assoc: $ (Alpha /\ Beta) /\ Gamma <-> Alpha /\ (Beta /\ Gamma) $;
theorem regex_eq_and_choice_comm_node: $ Alpha /\ (Beta /\ Gamma) <-> Beta /\ (Alpha /\ Gamma) $;
theorem regex_eq_and_choice_comm_leaf: $ Alpha /\ Beta <-> Beta /\ Alpha $;

---- Optional simplifications
theorem regex_eq_bot_concat_l: $ bot . Alpha <-> bot $;
theorem regex_eq_bot_concat_r: $ Alpha . bot <-> bot $;

theorem regex_eq_eps_concat_l: $ epsilon . Alpha <-> Alpha $;
theorem regex_eq_eps_concat_r: $ Alpha . epsilon <-> Alpha $;

theorem regex_eq_double_neg: $ ~ (~ Alpha) <-> Alpha $;
theorem regex_eq_double_kleene: $ (kleene X (kleene Y Alpha)) <-> Alpha $;

theorem regex_eq_eps_kleene: $ (kleene X epsilon) <-> epsilon $;
theorem regex_eq_bot_kleene: $ (kleene X bot) <-> epsilon $;

theorem norm_lemma
  (h1: $ Norm phi psi $)
  (h2: $ psi -> rho $):
  $ phi -> rho $ =
  '(norm (norm_imp_l @ norm_sym h1) h2);



theorem example_not_bot: $(mu nCzD (epsilon \/ ((a . (sVar nCzD)) \/ (b . (sVar nCzD))))) -> top$ =
  '(main_goal_interior
    (apply_equiv regex_eq_ewp_not_bot id)
    (norm_lemma ,(propag_s_subst 'nCzD $ (sVar nCzD) $)
      (apply_equiv regex_eq_der_neg_wrt_a (apply_equiv (cong_of_equiv_not regex_eq_der_bot_wrt_a) main_goal_leaf)))
    (norm_lemma ,(propag_s_subst 'nCzD $ (sVar nCzD) $)
      (apply_equiv regex_eq_der_neg_wrt_b (apply_equiv (cong_of_equiv_not regex_eq_der_bot_wrt_b) main_goal_leaf)))
  );

theorem example_a_or_b: $(mu CCapbDDx (epsilon \/ ((a . (sVar CCapbDDx)) \/ (b . (sVar CCapbDDx))))) -> top_word X$ =
  '(main_goal_interior
    (apply_equiv regex_eq_ewp_kleene id)
    (norm_lemma ,(propag_s_subst 'CCapbDDx $ (sVar CCapbDDx) $) (apply_equiv regex_eq_der_kleene_wrt_a (apply_equiv (cong_of_equiv_concat_l regex_eq_der_choice_wrt_a) (apply_equiv (cong_of_equiv_concat_l (cong_of_equiv_or_l regex_eq_der_same_a_wrt_a)) (apply_equiv (cong_of_equiv_concat_l (cong_of_equiv_or_r regex_eq_der_diff_a_wrt_a)) (apply_equiv (cong_of_equiv_concat_l regex_eq_or_choice_comm_leaf) (apply_equiv (cong_of_equiv_concat_l regex_eq_or_choice_unit) (apply_equiv regex_eq_eps_concat_l main_goal_leaf))))))))
    (norm_lemma ,(propag_s_subst 'CCapbDDx $ (sVar CCapbDDx) $) (apply_equiv regex_eq_der_kleene_wrt_b (apply_equiv (cong_of_equiv_concat_l regex_eq_der_choice_wrt_b) (apply_equiv (cong_of_equiv_concat_l (cong_of_equiv_or_r regex_eq_der_same_a_wrt_b)) (apply_equiv (cong_of_equiv_concat_l (cong_of_equiv_or_l regex_eq_der_diff_a_wrt_b)) (apply_equiv (cong_of_equiv_concat_l regex_eq_or_choice_unit) (apply_equiv regex_eq_eps_concat_l main_goal_leaf)))))))
  );

theorem example_not_a_or_a: $(mu CapnCaDD (epsilon \/ ((a . (mu CepnCeDD (epsilon \/ ((a . (mu nCzD (epsilon \/ ((a . (sVar nCzD)) \/ (b . (sVar nCzD)))))) \/ (b . (mu nCzD (epsilon \/ ((a . (sVar nCzD)) \/ (b . (sVar nCzD)))))))))) \/ (b . (mu nCzD (epsilon \/ ((a . (sVar nCzD)) \/ (b . (sVar nCzD))))))))) -> (not a) \/ a $ =
  '(apply_equiv regex_eq_or_choice_comm_leaf (main_goal_interior (apply_equiv regex_eq_ewp_choice (apply_equiv (cong_of_equiv_or_l regex_eq_ewp_a) (apply_equiv (cong_of_equiv_or_r regex_eq_ewp_not_a) (apply_equiv regex_eq_or_choice_unit id)))) (norm_lemma ,(propag_s_subst 'CapnCaDD $ (mu CepnCeDD (epsilon \/ ((a . (mu nCzD (epsilon \/ ((a . (sVar nCzD)) \/ (b . (sVar nCzD)))))) \/ (b . (mu nCzD (epsilon \/ ((a . (sVar nCzD)) \/ (b . (sVar nCzD))))))))) $) (apply_equiv regex_eq_der_choice_wrt_a (apply_equiv (cong_of_equiv_or_l regex_eq_der_same_a_wrt_a) (apply_equiv (cong_of_equiv_or_r regex_eq_der_neg_wrt_a) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not regex_eq_der_same_a_wrt_a)) (main_goal_interior (apply_equiv regex_eq_ewp_choice (apply_equiv (cong_of_equiv_or_l regex_eq_ewp_epsilon) (apply_equiv (cong_of_equiv_or_r regex_eq_ewp_not_eps) (apply_equiv regex_eq_or_choice_comm_leaf (apply_equiv regex_eq_or_choice_unit id))))) (norm_lemma ,(propag_s_subst 'CepnCeDD $ (mu nCzD (epsilon \/ ((a . (sVar nCzD)) \/ (b . (sVar nCzD))))) $) (apply_equiv regex_eq_der_choice_wrt_a (apply_equiv (cong_of_equiv_or_l regex_eq_der_epsilon_wrt_a) (apply_equiv (cong_of_equiv_or_r regex_eq_der_neg_wrt_a) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not regex_eq_der_epsilon_wrt_a)) (apply_equiv regex_eq_or_choice_unit (main_goal_interior (apply_equiv regex_eq_ewp_not_bot id) (norm_lemma ,(propag_s_subst 'nCzD $ (sVar nCzD) $) (apply_equiv regex_eq_der_neg_wrt_a (apply_equiv (cong_of_equiv_not regex_eq_der_bot_wrt_a) main_goal_leaf))) (norm_lemma ,(propag_s_subst 'nCzD $ (sVar nCzD) $) (apply_equiv regex_eq_der_neg_wrt_b (apply_equiv (cong_of_equiv_not regex_eq_der_bot_wrt_b) main_goal_leaf)))))))))) (norm_lemma ,(propag_s_subst 'CepnCeDD $ (mu nCzD (epsilon \/ ((a . (sVar nCzD)) \/ (b . (sVar nCzD))))) $) (apply_equiv regex_eq_der_choice_wrt_b (apply_equiv (cong_of_equiv_or_l regex_eq_der_epsilon_wrt_b) (apply_equiv (cong_of_equiv_or_r regex_eq_der_neg_wrt_b) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not regex_eq_der_epsilon_wrt_b)) (apply_equiv regex_eq_or_choice_unit (main_goal_interior (apply_equiv regex_eq_ewp_not_bot id) (norm_lemma ,(propag_s_subst 'nCzD $ (sVar nCzD) $) (apply_equiv regex_eq_der_neg_wrt_a (apply_equiv (cong_of_equiv_not regex_eq_der_bot_wrt_a) main_goal_leaf))) (norm_lemma ,(propag_s_subst 'nCzD $ (sVar nCzD) $) (apply_equiv regex_eq_der_neg_wrt_b (apply_equiv (cong_of_equiv_not regex_eq_der_bot_wrt_b) main_goal_leaf)))))))))))))))) (norm_lemma ,(propag_s_subst 'CapnCaDD $ (mu nCzD (epsilon \/ ((a . (sVar nCzD)) \/ (b . (sVar nCzD))))) $) (apply_equiv regex_eq_der_choice_wrt_b (apply_equiv (cong_of_equiv_or_l regex_eq_der_diff_a_wrt_b) (apply_equiv (cong_of_equiv_or_r regex_eq_der_neg_wrt_b) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not regex_eq_der_diff_a_wrt_b)) (apply_equiv regex_eq_or_choice_unit (main_goal_interior (apply_equiv regex_eq_ewp_not_bot id) (norm_lemma ,(propag_s_subst 'nCzD $ (sVar nCzD) $) (apply_equiv regex_eq_der_neg_wrt_a (apply_equiv (cong_of_equiv_not regex_eq_der_bot_wrt_a) main_goal_leaf))) (norm_lemma ,(propag_s_subst 'nCzD $ (sVar nCzD) $) (apply_equiv regex_eq_der_neg_wrt_b (apply_equiv (cong_of_equiv_not regex_eq_der_bot_wrt_b) main_goal_leaf))))))))))));

theorem example_a_astar_astar_a: $(mu CnCCCaDxaDDpCaCaDxDD (epsilon \/ ((a . (mu CCaDxpnCCepCCaDxaDDDD (epsilon \/ ((a . (sVar CCaDxpnCCepCCaDxaDDDD)) \/ (b . (mu nCzD (epsilon \/ ((a . (sVar nCzD)) \/ (b . (sVar nCzD)))))))))) \/ (b . (mu nCzD (epsilon \/ ((a . (sVar nCzD)) \/ (b . (sVar nCzD))))))))) -> ((not (concat (kleene _ a) a)) \/ (concat a (kleene _ a)))$ =
  '(main_goal_interior (apply_equiv regex_eq_ewp_choice (apply_equiv (cong_of_equiv_or_r regex_eq_ewp_concat) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_and_l regex_eq_ewp_a)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_and_r regex_eq_ewp_kleene)) (apply_equiv (cong_of_equiv_or_l regex_eq_ewp_not_concat) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_or_r regex_eq_ewp_not_a)) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_or_l regex_eq_ewp_not_kleene)) (apply_equiv (cong_of_equiv_or_l regex_eq_or_choice_unit) (apply_equiv (cong_of_equiv_or_r regex_eq_and_choice_abs) (apply_equiv regex_eq_or_choice_comm_leaf (apply_equiv regex_eq_or_choice_unit id))))))))))) (norm_lemma ,(propag_s_subst 'CnCCCaDxaDDpCaCaDxDD $ (mu CCaDxpnCCepCCaDxaDDDD (epsilon \/ ((a . (sVar CCaDxpnCCepCCaDxaDDDD)) \/ (b . (mu nCzD (epsilon \/ ((a . (sVar nCzD)) \/ (b . (sVar nCzD))))))))) $) (apply_equiv regex_eq_der_choice_wrt_a (apply_equiv (cong_of_equiv_or_r regex_eq_der_concat_wrt_a) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_concat_l regex_eq_der_same_a_wrt_a))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_r regex_eq_der_kleene_wrt_a))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_r (cong_of_equiv_concat_l regex_eq_der_same_a_wrt_a)))) (apply_equiv (cong_of_equiv_or_l regex_eq_der_neg_wrt_a) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not regex_eq_der_concat_wrt_a)) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_concat_r regex_eq_der_same_a_wrt_a)))) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_l (cong_of_equiv_concat_l regex_eq_der_kleene_wrt_a)))) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_l (cong_of_equiv_concat_l (cong_of_equiv_concat_l regex_eq_der_same_a_wrt_a))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_ewp_a))) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_ewp_kleene)))) (apply_equiv (cong_of_equiv_or_r regex_eq_or_choice_comm_leaf) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not regex_eq_or_choice_comm_leaf)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l regex_eq_bot_concat_l)) (apply_equiv (cong_of_equiv_or_r regex_eq_or_choice_unit) (apply_equiv (cong_of_equiv_or_r regex_eq_eps_concat_l) (apply_equiv regex_eq_or_choice_comm_leaf (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not (cong_of_equiv_or_l regex_eq_eps_concat_l))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_eps_concat_l)))) (main_goal_interior (apply_equiv regex_eq_ewp_choice (apply_equiv (cong_of_equiv_or_l regex_eq_ewp_kleene) (apply_equiv (cong_of_equiv_or_r regex_eq_ewp_not_choice) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_and_l regex_eq_ewp_not_eps)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_and_r regex_eq_ewp_not_concat)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_and_r (cong_of_equiv_or_r regex_eq_ewp_not_a))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_and_r (cong_of_equiv_or_l regex_eq_ewp_not_kleene))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_and_r regex_eq_or_choice_unit)) (apply_equiv (cong_of_equiv_or_r regex_eq_and_choice_abs) (apply_equiv regex_eq_or_choice_comm_leaf (apply_equiv regex_eq_or_choice_unit id))))))))))) (norm_lemma ,(propag_s_subst 'CCaDxpnCCepCCaDxaDDDD $ (sVar CCaDxpnCCepCCaDxaDDDD) $) (apply_equiv regex_eq_der_choice_wrt_a (apply_equiv (cong_of_equiv_or_l regex_eq_der_kleene_wrt_a) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_concat_l regex_eq_der_same_a_wrt_a)) (apply_equiv (cong_of_equiv_or_r regex_eq_der_neg_wrt_a) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not regex_eq_der_choice_wrt_a)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not (cong_of_equiv_or_l regex_eq_der_epsilon_wrt_a))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not (cong_of_equiv_or_r regex_eq_der_concat_wrt_a))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_r regex_eq_der_same_a_wrt_a))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_concat_l regex_eq_der_kleene_wrt_a))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_concat_l (cong_of_equiv_concat_l regex_eq_der_same_a_wrt_a)))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_ewp_kleene))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not regex_eq_or_choice_unit)) (apply_equiv regex_eq_or_choice_comm_leaf (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not regex_eq_or_choice_comm_leaf)) (apply_equiv (cong_of_equiv_or_r regex_eq_eps_concat_l) (apply_equiv regex_eq_or_choice_comm_leaf (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not (cong_of_equiv_or_l regex_eq_eps_concat_l))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_eps_concat_l)))) main_goal_leaf))))))))))))))))))) (norm_lemma ,(propag_s_subst 'CCaDxpnCCepCCaDxaDDDD $ (mu nCzD (epsilon \/ ((a . (sVar nCzD)) \/ (b . (sVar nCzD))))) $) (apply_equiv regex_eq_der_choice_wrt_b (apply_equiv (cong_of_equiv_or_l regex_eq_der_kleene_wrt_b) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_concat_l regex_eq_der_diff_a_wrt_b)) (apply_equiv (cong_of_equiv_or_r regex_eq_der_neg_wrt_b) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not regex_eq_der_choice_wrt_b)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not (cong_of_equiv_or_l regex_eq_der_epsilon_wrt_b))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not (cong_of_equiv_or_r regex_eq_der_concat_wrt_b))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_r regex_eq_der_diff_a_wrt_b))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_concat_l regex_eq_der_kleene_wrt_b))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_concat_l (cong_of_equiv_concat_l regex_eq_der_diff_a_wrt_b)))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_ewp_kleene))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_not regex_eq_or_choice_unit)) (apply_equiv regex_eq_or_choice_comm_leaf (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not regex_eq_or_choice_comm_leaf)) (apply_equiv (cong_of_equiv_or_r regex_eq_bot_concat_l) (apply_equiv regex_eq_or_choice_comm_leaf (apply_equiv regex_eq_or_choice_unit (apply_equiv (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_bot_concat_l))) (apply_equiv (cong_of_equiv_not regex_eq_or_choice_comm_leaf) (apply_equiv (cong_of_equiv_not (cong_of_equiv_or_l regex_eq_bot_concat_l)) (apply_equiv (cong_of_equiv_not regex_eq_or_choice_unit) (apply_equiv (cong_of_equiv_not regex_eq_bot_concat_r) (main_goal_interior (apply_equiv regex_eq_ewp_not_bot id) (norm_lemma ,(propag_s_subst 'nCzD $ (sVar nCzD) $) (apply_equiv regex_eq_der_neg_wrt_a (apply_equiv (cong_of_equiv_not regex_eq_der_bot_wrt_a) main_goal_leaf))) (norm_lemma ,(propag_s_subst 'nCzD $ (sVar nCzD) $) (apply_equiv regex_eq_der_neg_wrt_b (apply_equiv (cong_of_equiv_not regex_eq_der_bot_wrt_b) main_goal_leaf))))))))))))))))))))))))))))))))))))))))))))))))) (norm_lemma ,(propag_s_subst 'CnCCCaDxaDDpCaCaDxDD $ (mu nCzD (epsilon \/ ((a . (sVar nCzD)) \/ (b . (sVar nCzD))))) $) (apply_equiv regex_eq_der_choice_wrt_b (apply_equiv (cong_of_equiv_or_r regex_eq_der_concat_wrt_b) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_concat_l regex_eq_der_diff_a_wrt_b))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_r regex_eq_der_kleene_wrt_b))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_r (cong_of_equiv_concat_l regex_eq_der_diff_a_wrt_b)))) (apply_equiv (cong_of_equiv_or_l regex_eq_der_neg_wrt_b) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not regex_eq_der_concat_wrt_b)) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_concat_r regex_eq_der_diff_a_wrt_b)))) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_l (cong_of_equiv_concat_l regex_eq_der_kleene_wrt_b)))) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_l (cong_of_equiv_concat_l (cong_of_equiv_concat_l regex_eq_der_diff_a_wrt_b))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_ewp_a))) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_ewp_kleene)))) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not regex_eq_or_choice_comm_leaf)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l regex_eq_bot_concat_l)) (apply_equiv (cong_of_equiv_or_r regex_eq_or_choice_unit) (apply_equiv (cong_of_equiv_or_r regex_eq_bot_concat_l) (apply_equiv regex_eq_or_choice_comm_leaf (apply_equiv regex_eq_or_choice_unit (apply_equiv (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_bot_concat_l))) (apply_equiv (cong_of_equiv_not regex_eq_or_choice_comm_leaf) (apply_equiv (cong_of_equiv_not (cong_of_equiv_or_l regex_eq_bot_concat_l)) (apply_equiv (cong_of_equiv_not regex_eq_or_choice_unit) (apply_equiv (cong_of_equiv_not regex_eq_bot_concat_r) (main_goal_interior (apply_equiv regex_eq_ewp_not_bot id) (norm_lemma ,(propag_s_subst 'nCzD $ (sVar nCzD) $) (apply_equiv regex_eq_der_neg_wrt_a (apply_equiv (cong_of_equiv_not regex_eq_der_bot_wrt_a) main_goal_leaf))) (norm_lemma ,(propag_s_subst 'nCzD $ (sVar nCzD) $) (apply_equiv regex_eq_der_neg_wrt_b (apply_equiv (cong_of_equiv_not regex_eq_der_bot_wrt_b) main_goal_leaf)))))))))))))))))))))))))))));

theorem example_complex: $ (mu CepCnCCCaaDDxDpCCaDxaDDD (epsilon \/ ((a . (mu CepCnCCaCCaaDDxDDpCCaDxaDDD (epsilon \/ ((a . (sVar CepCnCCCaaDDxDpCCaDxaDDD)) \/ (b . (mu nCzD (epsilon \/ ((a . (sVar nCzD)) \/ (b . (sVar nCzD)))))))))) \/ (b . (mu nCzD (epsilon \/ ((a . (sVar nCzD)) \/ (b . (sVar nCzD))))))))) -> ( ~ (kleene X (a . a)) ) \/ (((kleene X a) . a) \/ epsilon)$ =
  '(apply_equiv (cong_of_equiv_or_r regex_eq_or_choice_comm_leaf) (apply_equiv regex_eq_or_choice_comm_node (main_goal_interior (apply_equiv regex_eq_ewp_choice (apply_equiv (cong_of_equiv_or_l regex_eq_ewp_epsilon) (apply_equiv (cong_of_equiv_or_r regex_eq_ewp_choice) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r regex_eq_ewp_concat)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_and_r regex_eq_ewp_a))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_and_l regex_eq_ewp_kleene))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r regex_eq_ewp_bot)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l regex_eq_ewp_not_kleene)) (apply_equiv (cong_of_equiv_or_r regex_eq_or_choice_unit) (apply_equiv regex_eq_or_choice_comm_leaf (apply_equiv regex_eq_or_choice_unit id))))))))))) (norm_lemma ,(propag_s_subst 'CepCnCCCaaDDxDpCCaDxaDDD $ (mu CepCnCCaCCaaDDxDDpCCaDxaDDD (epsilon \/ ((a . (sVar CepCnCCCaaDDxDpCCaDxaDDD)) \/ (b . (mu nCzD (epsilon \/ ((a . (sVar nCzD)) \/ (b . (sVar nCzD))))))))) $) (apply_equiv regex_eq_der_choice_wrt_a (apply_equiv (cong_of_equiv_or_l regex_eq_der_epsilon_wrt_a) (apply_equiv (cong_of_equiv_or_r regex_eq_der_choice_wrt_a) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r regex_eq_der_concat_wrt_a)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_r regex_eq_der_same_a_wrt_a)))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_concat_l regex_eq_der_kleene_wrt_a)))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_concat_l (cong_of_equiv_concat_l regex_eq_der_same_a_wrt_a))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l regex_eq_der_neg_wrt_a)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not regex_eq_der_kleene_wrt_a))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_concat_l regex_eq_der_concat_wrt_a)))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_concat_l (cong_of_equiv_or_l (cong_of_equiv_concat_l regex_eq_der_same_a_wrt_a)))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_concat_l (cong_of_equiv_or_r (cong_of_equiv_concat_r regex_eq_der_same_a_wrt_a)))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_concat_l (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_ewp_a)))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_ewp_kleene)))) (apply_equiv regex_eq_or_choice_unit (apply_equiv (cong_of_equiv_or_r regex_eq_or_choice_comm_leaf) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_concat_l regex_eq_or_choice_comm_leaf))) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_concat_l (cong_of_equiv_or_l regex_eq_bot_concat_l)))) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_concat_l regex_eq_or_choice_unit))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l regex_eq_eps_concat_l)) (apply_equiv regex_eq_or_choice_comm_node (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_eps_concat_l))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_concat_l regex_eq_eps_concat_l)))) (main_goal_interior (apply_equiv regex_eq_ewp_choice (apply_equiv (cong_of_equiv_or_l regex_eq_ewp_epsilon) (apply_equiv (cong_of_equiv_or_r regex_eq_ewp_choice) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r regex_eq_ewp_concat)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_and_r regex_eq_ewp_a))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_and_l regex_eq_ewp_kleene))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r regex_eq_ewp_bot)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l regex_eq_ewp_not_concat)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_or_l regex_eq_ewp_not_a))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_or_r regex_eq_ewp_not_kleene))) (apply_equiv (cong_of_equiv_or_r regex_eq_or_choice_assoc) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r regex_eq_or_choice_unit)) (apply_equiv (cong_of_equiv_or_r regex_eq_or_choice_comm_leaf) (apply_equiv (cong_of_equiv_or_r regex_eq_or_choice_unit) (apply_equiv regex_eq_or_choice_idem id))))))))))))))) (norm_lemma ,(propag_s_subst 'CepCnCCaCCaaDDxDDpCCaDxaDDD $ (sVar CepCnCCCaaDDxDpCCaDxaDDD) $) (apply_equiv regex_eq_der_choice_wrt_a (apply_equiv (cong_of_equiv_or_l regex_eq_der_epsilon_wrt_a) (apply_equiv (cong_of_equiv_or_r regex_eq_der_choice_wrt_a) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r regex_eq_der_concat_wrt_a)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_r regex_eq_der_same_a_wrt_a)))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_concat_l regex_eq_der_kleene_wrt_a)))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_concat_l (cong_of_equiv_concat_l regex_eq_der_same_a_wrt_a))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l regex_eq_der_neg_wrt_a)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not regex_eq_der_concat_wrt_a))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_l (cong_of_equiv_concat_l regex_eq_der_same_a_wrt_a))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_concat_r regex_eq_der_kleene_wrt_a))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_concat_r (cong_of_equiv_concat_l regex_eq_der_concat_wrt_a)))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_concat_r (cong_of_equiv_concat_l (cong_of_equiv_or_l (cong_of_equiv_concat_l regex_eq_der_same_a_wrt_a)))))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_concat_r (cong_of_equiv_concat_l (cong_of_equiv_or_r (cong_of_equiv_concat_r regex_eq_der_same_a_wrt_a)))))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_ewp_a))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_concat_r (cong_of_equiv_concat_l (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_ewp_a)))))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_ewp_kleene)))) (apply_equiv regex_eq_or_choice_unit (apply_equiv (cong_of_equiv_or_r regex_eq_or_choice_comm_leaf) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not regex_eq_or_choice_comm_leaf)) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_l (cong_of_equiv_concat_r (cong_of_equiv_concat_l regex_eq_or_choice_comm_leaf))))) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_l regex_eq_bot_concat_l))) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not regex_eq_or_choice_unit)) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not regex_eq_eps_concat_l)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l regex_eq_eps_concat_l)) (apply_equiv regex_eq_or_choice_comm_node (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_eps_concat_l))) main_goal_leaf)))))))))))))))))))))))))))) (norm_lemma ,(propag_s_subst 'CepCnCCaCCaaDDxDDpCCaDxaDDD $ (mu nCzD (epsilon \/ ((a . (sVar nCzD)) \/ (b . (sVar nCzD))))) $) (apply_equiv regex_eq_der_choice_wrt_b (apply_equiv (cong_of_equiv_or_l regex_eq_der_epsilon_wrt_b) (apply_equiv (cong_of_equiv_or_r regex_eq_der_choice_wrt_b) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r regex_eq_der_concat_wrt_b)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_r regex_eq_der_diff_a_wrt_b)))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_concat_l regex_eq_der_kleene_wrt_b)))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_concat_l (cong_of_equiv_concat_l regex_eq_der_diff_a_wrt_b))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l regex_eq_der_neg_wrt_b)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not regex_eq_der_concat_wrt_b))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_l (cong_of_equiv_concat_l regex_eq_der_diff_a_wrt_b))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_concat_r regex_eq_der_kleene_wrt_b))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_concat_r (cong_of_equiv_concat_l regex_eq_der_concat_wrt_b)))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_concat_r (cong_of_equiv_concat_l (cong_of_equiv_or_l (cong_of_equiv_concat_l regex_eq_der_diff_a_wrt_b)))))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_concat_r (cong_of_equiv_concat_l (cong_of_equiv_or_r (cong_of_equiv_concat_r regex_eq_der_diff_a_wrt_b)))))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_ewp_a))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_concat_r (cong_of_equiv_concat_l (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_ewp_a)))))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_ewp_kleene)))) (apply_equiv regex_eq_or_choice_unit (apply_equiv (cong_of_equiv_or_r regex_eq_or_choice_comm_leaf) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_r (cong_of_equiv_concat_r (cong_of_equiv_concat_l regex_eq_or_choice_comm_leaf))))) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_or_l regex_eq_bot_concat_l))) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not regex_eq_or_choice_unit)) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not regex_eq_bot_concat_l)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_bot_concat_l))) (apply_equiv (cong_of_equiv_or_r regex_eq_or_choice_comm_leaf) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l regex_eq_bot_concat_l)) (apply_equiv (cong_of_equiv_or_r regex_eq_or_choice_unit) (apply_equiv (cong_of_equiv_or_r regex_eq_bot_concat_r) (apply_equiv regex_eq_or_choice_comm_leaf (apply_equiv regex_eq_or_choice_unit (main_goal_interior (apply_equiv regex_eq_ewp_not_bot id) (norm_lemma ,(propag_s_subst 'nCzD $ (sVar nCzD) $) (apply_equiv regex_eq_der_neg_wrt_a (apply_equiv (cong_of_equiv_not regex_eq_der_bot_wrt_a) main_goal_leaf))) (norm_lemma ,(propag_s_subst 'nCzD $ (sVar nCzD) $) (apply_equiv regex_eq_der_neg_wrt_b (apply_equiv (cong_of_equiv_not regex_eq_der_bot_wrt_b) main_goal_leaf)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (norm_lemma ,(propag_s_subst 'CepCnCCCaaDDxDpCCaDxaDDD $ (mu nCzD (epsilon \/ ((a . (sVar nCzD)) \/ (b . (sVar nCzD))))) $) (apply_equiv regex_eq_der_choice_wrt_b (apply_equiv (cong_of_equiv_or_l regex_eq_der_epsilon_wrt_b) (apply_equiv (cong_of_equiv_or_r regex_eq_der_choice_wrt_b) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r regex_eq_der_concat_wrt_b)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_r regex_eq_der_diff_a_wrt_b)))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_concat_l regex_eq_der_kleene_wrt_b)))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_concat_l (cong_of_equiv_concat_l regex_eq_der_diff_a_wrt_b))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l regex_eq_der_neg_wrt_b)) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not regex_eq_der_kleene_wrt_b))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_concat_l regex_eq_der_concat_wrt_b)))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_concat_l (cong_of_equiv_or_l (cong_of_equiv_concat_l regex_eq_der_diff_a_wrt_b)))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_concat_l (cong_of_equiv_or_r (cong_of_equiv_concat_r regex_eq_der_diff_a_wrt_b)))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_concat_l (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_ewp_a)))))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_ewp_kleene)))) (apply_equiv regex_eq_or_choice_unit (apply_equiv (cong_of_equiv_or_r regex_eq_or_choice_comm_leaf) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_concat_l regex_eq_or_choice_comm_leaf))) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_r (cong_of_equiv_concat_l regex_eq_bot_concat_l))) (apply_equiv (cong_of_equiv_or_r regex_eq_or_choice_comm_leaf) (apply_equiv (cong_of_equiv_or_r (cong_of_equiv_or_l regex_eq_bot_concat_l)) (apply_equiv (cong_of_equiv_or_r regex_eq_or_choice_unit) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_concat_l (cong_of_equiv_or_l regex_eq_bot_concat_l)))) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_concat_l regex_eq_or_choice_unit))) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not (cong_of_equiv_concat_l regex_eq_bot_concat_l))) (apply_equiv (cong_of_equiv_or_l (cong_of_equiv_not regex_eq_bot_concat_l)) (apply_equiv (cong_of_equiv_or_r regex_eq_bot_concat_r) (apply_equiv regex_eq_or_choice_comm_leaf (apply_equiv regex_eq_or_choice_unit (main_goal_interior (apply_equiv regex_eq_ewp_not_bot id) (norm_lemma ,(propag_s_subst 'nCzD $ (sVar nCzD) $) (apply_equiv regex_eq_der_neg_wrt_a (apply_equiv (cong_of_equiv_not regex_eq_der_bot_wrt_a) main_goal_leaf))) (norm_lemma ,(propag_s_subst 'nCzD $ (sVar nCzD) $) (apply_equiv regex_eq_der_neg_wrt_b (apply_equiv (cong_of_equiv_not regex_eq_der_bot_wrt_b) main_goal_leaf))))))))))))))))))))))))))))))))))));