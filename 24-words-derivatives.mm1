import "00-matching-logic.mm0";
import "01-propositional.mm1";
import "02-ml-normalization.mm1";
import "12-proof-system-p.mm1";
import "13-fixedpoints.mm1";
import "20-theory-words.mm1";
import "22-words-salomaa.mm1";
import "23-words-fixedpoints.mm1";

--- Derivatives
---------------

def derivative (l: Pattern) (phi: Pattern) : Pattern
    = $ctximp_app box (l . sVar box) phi dummy $;
--- = $exists w (eVar w)  /\ (l . eVar w C_ phi)$;

axiom der_equality:
    $phi == (epsilon /\ phi) \/ (a . (derivative a phi)) \/ (b . (derivative b phi))$;

axiom eq_der_a_concat:
    $(derivative a (phi . psi)) <->    (derivative a phi) . psi
                                   \/ ((epsilon /\ phi) . (derivative a psi))$;
axiom eq_der_a_or:
    $(derivative a (phi \/ psi)) <-> (derivative a phi) \/ (derivative a psi)$;
axiom eq_der_a_kleene {X: SVar} (phi: Pattern X):
    $(derivative a (kleene X phi)) <-> (derivative a phi) . (kleene X phi)$;
axiom eq_der_a_not:
    $(derivative a (~ phi)) <-> ~ (derivative a phi)$;
axiom eq_der_a_imp:
    $(derivative a (phi -> psi)) <-> ((derivative a phi) -> (derivative a psi))$;

--- Contextual reasoning
------------------------

theorem cong_of_equiv_concat_l (h: $phi1 <-> phi2$): $(phi1 . psi) <-> (phi2 . psi)$ =
  '(ibii (framing_concat_l @ anl h) (framing_concat_l @ anr h));
theorem cong_of_equiv_concat_r (h: $phi1 <-> phi2$): $(psi . phi1) <-> (psi . phi2)$ =
  '(ibii (framing_concat_r @ anl h) (framing_concat_r @ anr h));
axiom cong_of_equiv_kleene {X: SVar} (phi1 phi2: Pattern X) (h: $phi1 <-> phi2$): $(kleene X phi1) <-> (kleene X phi2)$;

--- Reasoning about regular expressions
---------------------------------------

--- top-implies-fp
------------------

axiom top_implies_fp_init {X: SVar} (h: $phi . top_letter -> phi$)
    : $top_word X -> phi$;

axiom top_implies_fp_interior {X: SVar}
    (he_a: $epsilon -> s[ (mu X (epsilon \/ (a . phi_a) \/ (b . phi_b))) / X ] phi_a$)
    (he_b: $epsilon -> s[ (mu X (epsilon \/ (a . phi_a) \/ (b . phi_b))) / X ] phi_b$)
                                --- ^^^ Together these give (letter -> rhs)
    (ha: $(s[ (ctximp_app Box (sVar Box . top_letter) (mu X (epsilon \/ (a . phi_a) \/ (b . phi_b))) _) / X ] psi_a) -> (s[ (mu X (epsilon \/ (a . phi_a) \/ (b . phi_b))) / X ] phi_a)$)
    (hb: $(s[ (ctximp_app Box (sVar Box . top_letter) (mu X (epsilon \/ (a . phi_a) \/ (b . phi_b))) _) / X ] psi_b) -> (s[ (mu X (epsilon \/ (a . phi_a) \/ (b . phi_b))) / X ] phi_b)$)
  : ------------------------
    $(mu X (epsilon \/ ((a . psi_a) \/ (b . psi_b)))) . top_letter -> (mu X (epsilon \/ ((a . phi_a) \/ (b . phi_b))))$;


--- fp-implies-alpha
--------------------

theorem main_goal_leaf :
    $rho -> rho$ = 'id;

axiom main_goal_interior {X: SVar} (phi_a phi_b: Pattern X)
    (he: $epsilon -> epsilon /\ rho$)
    (ha: $s[ rho / X ] phi_a -> (derivative a rho)$)
    (hb: $s[ rho / X ] phi_b -> (derivative b rho)$):
    ----------------------------------------------
    $(mu X (epsilon \/ ((a . phi_a) \/ (b . phi_b)))) -> rho$;

--| Apply equivalence left to right
theorem apply_equiv (eq: $phi <-> psi$) (cont: $rho -> psi$): $rho -> phi$
  = '(syl (bi2i eq) cont);



theorem _sSubst_nnimp {X: SVar} (phi phi1 phi2 psi1 psi2: Pattern X)
  (h1: $ Norm (s[ phi / X ] phi1) psi1 $)
  (h2: $ Norm (s[ phi / X ] phi2) psi2 $):
  $ Norm (s[ phi / X ] (phi1 ->> phi2)) (psi1 ->> psi2) $ =
  '(_sSubst_imp (_sSubst_not @ _sSubst_not h1) h2);

theorem _eSubst_concat {x: EVar} (phi psi1 psi2 rho1 rho2: Pattern x)
  (h1: $ Norm (e[ phi / x ] psi1) rho1 $)
  (h2: $ Norm (e[ phi / x ] psi2) rho2 $):
  $ Norm (e[ phi / x ] (psi1 . psi2)) (rho1 . rho2) $ =
  '(_eSubst_app (_eSubst_app eSubstitution_triv h1) h2);


theorem example_10_concat {X: SVar} (phi: Pattern):
  $ Norm (s[ phi / X ] (concat bot (sVar X))) (concat bot phi) $ =
  propag_s_subst_auto;


-- theorem regex_eq_der_bot_lemma_1 {x y v w: EVar}:
--   $ Norm (e[ eVar y / v ] exists x (eVar x == eVar w . eVar v )) (exists x (eVar x == eVar w . eVar y )) $ =
--   propag_e_subst_auto;
-- 
-- 
-- theorem regex_eq_der_bot_lemma_2 {x y v w: EVar}:
--   $ (forall v (exists x (eVar x == eVar w . eVar v ))) -> exists x (eVar x == eVar w . eVar y ) $ =
--   '(norm (norm_imp_r regex_eq_der_bot_lemma_1) var_subst);
-- 
-- (norm (,propag_e_subst_auto) @ var_subst @ norm (,propag_e_subst_auto) @ var_subst functional_concat)
-- norm (norm_def appCtxVar) @
-- theorem regex_eq_der_bot
--   (h: $ exists x (eVar x == A) $):
--   $ (derivative A bot) -> bot $
--   = '(exists_generalization_strict @ con3 anr @ notnot1 @ framingDef notnot1 @
--     exists_generalization_strict (com12
--       (eq_to_def @ norm (norm_imp_r @ norm_imp_r @ norm_sym @ norm_trans appCtxR @ norm_app norm_refl appCtxVar) @ eq_to_app_l @ eq_to_app_r eq_to_intro)
--       (exists_generalization_strict (com12 (eq_to_def eq_to_intro) definedness) @
--          norm _ @ var_subst @ norm _ @ var_subst functional_concat)
--         ) h
--   );

axiom regex_eq_der_bot_wrt_a:
  $ (derivative a bot) <-> bot $;
axiom regex_eq_der_bot_wrt_b:
  $ (derivative b bot) <-> bot $;

axiom regex_eq_der_epsilon_wrt_a:
  $ (derivative a epsilon) <-> bot $;
axiom regex_eq_der_epsilon_wrt_b:
  $ (derivative b epsilon) <-> bot $;

axiom regex_eq_der_same_a_wrt_a:
  $ (derivative a a) <-> epsilon $;
axiom regex_eq_der_same_a_wrt_b:
  $ (derivative b b) <-> epsilon $;

axiom regex_eq_der_diff_a_wrt_a:
  $ (derivative a b) <-> bot $;
axiom regex_eq_der_diff_a_wrt_b:
  $ (derivative b a) <-> bot $;

axiom regex_eq_der_kleene_wrt_a {X: SVar} (Alpha: Pattern X): $ (derivative a (kleene X Alpha)) <-> ((derivative a Alpha) . (kleene X Alpha)) $;
axiom regex_eq_der_kleene_wrt_b {X: SVar} (Alpha: Pattern X): $ (derivative b (kleene X Alpha)) <-> ((derivative b Alpha) . (kleene X Alpha)) $;
axiom regex_eq_der_concat_wrt_a: $ (derivative a (Alpha . Beta)) <-> ((derivative a Alpha) . Beta) \/  ((epsilon /\ Alpha) . (derivative a Beta)) $;
axiom regex_eq_der_concat_wrt_b: $ (derivative b (Alpha . Beta)) <-> ((derivative b Alpha) . Beta) \/  ((epsilon /\ Alpha) . (derivative b Beta)) $;
axiom regex_eq_der_choice_wrt_a: $ (derivative a (Alpha \/ Beta)) <-> (derivative a Alpha) \/ (derivative a Beta) $;
axiom regex_eq_der_choice_wrt_b: $ (derivative b (Alpha \/ Beta)) <-> (derivative b Alpha) \/ (derivative b Beta) $;
axiom regex_eq_der_conj_wrt_a: $ (derivative a (Alpha /\ Beta)) <-> (derivative a Alpha) /\ (derivative a Beta) $;
axiom regex_eq_der_conj_wrt_b: $ (derivative b (Alpha /\ Beta)) <-> (derivative b Alpha) /\ (derivative b Beta) $;
axiom regex_eq_der_neg_wrt_a: $ (derivative a (~ Alpha)) <-> ~ (derivative a Alpha) $;
axiom regex_eq_der_neg_wrt_b: $ (derivative b (~ Alpha)) <-> ~ (derivative b Alpha) $;

axiom regex_eq_ewp_bot:
  $ (epsilon /\ bot) <-> bot $ ; --- = '(notnot1 idd);

axiom regex_eq_ewp_epsilon:
  $ epsilon /\ epsilon <-> epsilon $ ; --- = '(anl);


theorem regex_eq_ewp_ab
  (h: $ letter -> top_letter $):
  $ epsilon /\ letter <-> bot $
  = '(ibii
    (exists_generalization_strict
      (com12
        (eq_to_imp (eq_to_def @ eq_to_and_l eq_to_intro) (eq_to_not @ eq_to_and_l eq_to_intro))
        (con2 (dne @ singleton_norm (! appCtxVar box1) (! defNorm box2))) -- |^ x /\ ~a ^| <-> ~(x /\ a)
      ) (exists_framing eq_sym (! functional_epsilon x))
      (framingDef (con3 @ imim2i @ syl h dne) @ dne no_confusion_ae_e))
    absurdum);

theorem regex_eq_ewp_a:
  $ epsilon /\ a <-> bot $ = '(regex_eq_ewp_ab orl);

theorem regex_eq_ewp_b:
  $ epsilon /\ b <-> bot $ = '(regex_eq_ewp_ab orr);

axiom regex_eq_ewp_concat:
  $ epsilon /\ (Alpha . Beta) <-> (epsilon /\ Alpha) /\ (epsilon /\ Beta) $;

theorem regex_eq_ewp_and:
  $ epsilon /\ (Alpha /\ Beta) <-> (epsilon /\ Alpha) /\ (epsilon /\ Beta) $
  = 'anandi;

theorem regex_eq_ewp_choice:
  $ epsilon /\ (Alpha \/ Beta) <-> (epsilon /\ Alpha) \/ (epsilon /\ Beta) $
  = 'andi;

axiom regex_eq_ewp_kleene {X: SVar} (Alpha: Pattern X):
  $ epsilon /\ (kleene X Alpha) <-> epsilon $;
---  = '(anl);

axiom regex_eq_ewp_not_bot: $ (epsilon /\ ~bot) <-> epsilon $;
axiom regex_eq_ewp_not_eps: $ (epsilon /\ ~epsilon) <-> bot $;
axiom regex_eq_ewp_not_a: $ (epsilon /\ ~a) <-> epsilon $;
axiom regex_eq_ewp_not_b: $ (epsilon /\ ~b) <-> epsilon $;
axiom regex_eq_ewp_not_concat: $ (epsilon /\ ~(Alpha . Beta)) <-> ((epsilon /\ ~ Alpha) \/ (epsilon /\ ~ Beta)) $;
axiom regex_eq_ewp_not_and: $ (epsilon /\ ~(Alpha /\ Beta)) <-> ((epsilon /\ ~ Alpha) \/ (epsilon /\ ~ Beta)) $;
axiom regex_eq_ewp_not_choice: $ (epsilon /\ ~(Alpha \/ Beta)) <-> ((epsilon /\ ~ Alpha) /\ (epsilon /\ ~ Beta)) $;
axiom regex_eq_ewp_not_kleene {X: SVar} (Alpha: Pattern X): $ (epsilon /\ ~(kleene X Alpha)) <-> bot $;
axiom regex_eq_ewp_not_not: $ (epsilon /\ ~(~ Alpha)) <-> (epsilon /\ Alpha) $;

--- Identity and idemoptency of \/
axiom regex_eq_or_choice_abs: $ top \/ Alpha <-> top $;
axiom regex_eq_or_choice_unit: $ bot \/ Alpha <-> Alpha $;
axiom regex_eq_or_choice_idem: $ Alpha \/ Alpha <-> Alpha $;
axiom regex_eq_or_choice_assoc: $ (Alpha \/ Beta) \/ Gamma <-> Alpha \/ (Beta \/ Gamma) $;
axiom regex_eq_or_choice_comm_node: $ Alpha \/ (Beta \/ Gamma) <-> Beta \/ (Alpha \/ Gamma) $;
axiom regex_eq_or_choice_comm_leaf: $ Alpha \/ Beta <-> Beta \/ Alpha $;

--- Identity and idemoptency of /\
axiom regex_eq_and_choice_abs: $ bot /\ Alpha <-> bot $;
axiom regex_eq_and_choice_unit: $ top /\ Alpha <-> Alpha $;
axiom regex_eq_and_choice_idem: $ Alpha /\ Alpha <-> Alpha $;
axiom regex_eq_and_choice_assoc: $ (Alpha /\ Beta) /\ Gamma <-> Alpha /\ (Beta /\ Gamma) $;
axiom regex_eq_and_choice_comm_node: $ Alpha /\ (Beta /\ Gamma) <-> Beta /\ (Alpha /\ Gamma) $;
axiom regex_eq_and_choice_comm_leaf: $ Alpha /\ Beta <-> Beta /\ Alpha $;

---- Optional simplifications
axiom regex_eq_bot_concat_l: $ bot . Alpha <-> bot $;
axiom regex_eq_bot_concat_r: $ Alpha . bot <-> bot $;

axiom regex_eq_eps_concat_l: $ epsilon . Alpha <-> Alpha $;
axiom regex_eq_eps_concat_r: $ Alpha . epsilon <-> Alpha $;

axiom regex_eq_double_neg: $ ~ (~ Alpha) <-> Alpha $;
axiom regex_eq_double_kleene {X: SVar} (Alpha: Pattern X): $ (kleene X (kleene X Alpha)) <-> (kleene X Alpha) $;

axiom regex_eq_eps_kleene: $ (kleene X epsilon) <-> epsilon $;
axiom regex_eq_bot_kleene: $ (kleene X bot) <-> epsilon $;
